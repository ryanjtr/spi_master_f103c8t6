
spi_master_stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc4  08000dc4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc4  08000dc4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc4  08000dc4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc4  08000dc4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc4  08000dc4  00001dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dc8  08000dc8  00001dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000dcc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000dd0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000dd0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000293f  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c53  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  000055c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d9  00000000  00000000  000059b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001184b  00000000  00000000  00005c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000037bf  00000000  00000000  000174d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b2b7  00000000  00000000  0001ac93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00075f4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef0  00000000  00000000  00075f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00076e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000dac 	.word	0x08000dac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000dac 	.word	0x08000dac

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	@ (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	@ (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	@ (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	@ 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	@ 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	@ (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <LL_RCC_HSI_IsReady+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4903      	ldr	r1, [pc, #12]	@ (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	600b      	str	r3, [r1, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <LL_RCC_SetSysClkSource+0x24>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f023 0203 	bic.w	r2, r3, #3
 8000318:	4904      	ldr	r1, [pc, #16]	@ (800032c <LL_RCC_SetSysClkSource+0x24>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4313      	orrs	r3, r2
 800031e:	604b      	str	r3, [r1, #4]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000334:	4b03      	ldr	r3, [pc, #12]	@ (8000344 <LL_RCC_GetSysClkSource+0x14>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f003 030c 	and.w	r3, r3, #12
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000358:	4904      	ldr	r1, [pc, #16]	@ (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000380:	4904      	ldr	r1, [pc, #16]	@ (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80003a8:	4904      	ldr	r1, [pc, #16]	@ (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ca:	69da      	ldr	r2, [r3, #28]
 80003cc:	4907      	ldr	r1, [pc, #28]	@ (80003ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4013      	ands	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003de:	68fb      	ldr	r3, [r7, #12]
}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <LL_APB2_GRP1_EnableClock+0x2c>)
 80003fa:	699a      	ldr	r2, [r3, #24]
 80003fc:	4907      	ldr	r1, [pc, #28]	@ (800041c <LL_APB2_GRP1_EnableClock+0x2c>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4013      	ands	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800040e:	68fb      	ldr	r3, [r7, #12]
}
 8000410:	bf00      	nop
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <LL_FLASH_SetLatency+0x24>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f023 0207 	bic.w	r2, r3, #7
 8000430:	4904      	ldr	r1, [pc, #16]	@ (8000444 <LL_FLASH_SetLatency+0x24>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4313      	orrs	r3, r2
 8000436:	600b      	str	r3, [r1, #0]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40022000 	.word	0x40022000

08000448 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800044c:	4b03      	ldr	r3, [pc, #12]	@ (800045c <LL_FLASH_GetLatency+0x14>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f003 0307 	and.w	r3, r3, #7
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40022000 	.word	0x40022000

08000460 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	611a      	str	r2, [r3, #16]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	0a1b      	lsrs	r3, r3, #8
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	615a      	str	r2, [r3, #20]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b085      	sub	sp, #20
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	4013      	ands	r3, r2
 80004d8:	041a      	lsls	r2, r3, #16
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	43d9      	mvns	r1, r3
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	400b      	ands	r3, r1
 80004e2:	431a      	orrs	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	611a      	str	r2, [r3, #16]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
	...

080004f4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000500:	4a03      	ldr	r2, [pc, #12]	@ (8000510 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000506:	6053      	str	r3, [r2, #4]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40010000 	.word	0x40010000

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff68 	bl	80003f0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000520:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000524:	f7ff ff4c 	bl	80003c0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f7ff fe0f 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800052e:	f7ff fe31 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000532:	4603      	mov	r3, r0
 8000534:	2200      	movs	r2, #0
 8000536:	210f      	movs	r1, #15
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe7f 	bl	800023c <NVIC_EncodePriority>
 800053e:	4603      	mov	r3, r0
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 30ff 	mov.w	r0, #4294967295
 8000546:	f7ff fe4f 	bl	80001e8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800054a:	f7ff ffd3 	bl	80004f4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f82d 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8c5 	bl	80006e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000556:	f000 f85b 	bl	8000610 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//uint8_t id_manufacter[4];
uint8_t tx_data[4]={0x01,0x13,0x14,0x15};
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <main+0x88>)
 800055c:	607b      	str	r3, [r7, #4]
    /* USER CODE BEGIN 3 */
//	  reset_device();
//	  read_id_manufacter(id_manufacter);
//	  write_data(0x30, tx_data, 1);
//	   Kéo CS xuống mức 0 để bắt đầu giao tiếp
	  LL_GPIO_ResetOutputPin(CS3_GPIO_Port, CS3_Pin);
 800055e:	f640 0108 	movw	r1, #2056	@ 0x808
 8000562:	480f      	ldr	r0, [pc, #60]	@ (80005a0 <main+0x8c>)
 8000564:	f7ff ff9a 	bl	800049c <LL_GPIO_ResetOutputPin>
	  // Bật tính năng ghi bằng lệnh Write Enable (0x06)
	  spi_transmit(&tx_data[0], 1, 1000);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fb91 	bl	8000c98 <spi_transmit>
	  // Kéo CS lên mức 1 để hoàn thành lệnh
	  LL_GPIO_SetOutputPin(CS3_GPIO_Port, CS3_Pin);
 8000576:	f640 0108 	movw	r1, #2056	@ 0x808
 800057a:	4809      	ldr	r0, [pc, #36]	@ (80005a0 <main+0x8c>)
 800057c:	f7ff ff7f 	bl	800047e <LL_GPIO_SetOutputPin>
	  tx_data[0]++;
 8000580:	793b      	ldrb	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	713b      	strb	r3, [r7, #4]
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 8000588:	4906      	ldr	r1, [pc, #24]	@ (80005a4 <main+0x90>)
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <main+0x94>)
 800058c:	f7ff ff95 	bl	80004ba <LL_GPIO_TogglePin>
	  LL_mDelay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000594:	f000 faf8 	bl	8000b88 <LL_mDelay>
	  LL_GPIO_ResetOutputPin(CS3_GPIO_Port, CS3_Pin);
 8000598:	bf00      	nop
 800059a:	e7e0      	b.n	800055e <main+0x4a>
 800059c:	15141301 	.word	0x15141301
 80005a0:	40010800 	.word	0x40010800
 80005a4:	04200020 	.word	0x04200020
 80005a8:	40011000 	.word	0x40011000

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ff35 	bl	8000420 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005b6:	bf00      	nop
 80005b8:	f7ff ff46 	bl	8000448 <LL_FLASH_GetLatency>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1fa      	bne.n	80005b8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005c2:	2010      	movs	r0, #16
 80005c4:	f7ff fe8c 	bl	80002e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80005c8:	f7ff fe6a 	bl	80002a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005cc:	bf00      	nop
 80005ce:	f7ff fe75 	bl	80002bc <LL_RCC_HSI_IsReady>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d1fa      	bne.n	80005ce <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff feb5 	bl	8000348 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff fec6 	bl	8000370 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff fed7 	bl	8000398 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff fe8c 	bl	8000308 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80005f0:	bf00      	nop
 80005f2:	f7ff fe9d 	bl	8000330 <LL_RCC_GetSysClkSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1fa      	bne.n	80005f2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <SystemClock_Config+0x60>)
 80005fe:	f000 fab5 	bl	8000b6c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000602:	4802      	ldr	r0, [pc, #8]	@ (800060c <SystemClock_Config+0x60>)
 8000604:	f000 fae4 	bl	8000bd0 <LL_SetSystemCoreClock>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	007a1200 	.word	0x007a1200

08000610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	@ 0x40
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2228      	movs	r2, #40	@ 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fb98 	bl	8000d54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000632:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000636:	f7ff fedb 	bl	80003f0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800063a:	2004      	movs	r0, #4
 800063c:	f7ff fed8 	bl	80003f0 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000640:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 8000644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000646:	2309      	movs	r3, #9
 8000648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <MX_SPI1_Init+0xc8>)
 8000658:	f000 f99b 	bl	8000992 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800065c:	f244 0340 	movw	r3, #16448	@ 0x4040
 8000660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000662:	2304      	movs	r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <MX_SPI1_Init+0xc8>)
 800066c:	f000 f991 	bl	8000992 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000670:	f7ff fd90 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000674:	4603      	mov	r3, r0
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdde 	bl	800023c <NVIC_EncodePriority>
 8000680:	4603      	mov	r3, r0
 8000682:	4619      	mov	r1, r3
 8000684:	2023      	movs	r0, #35	@ 0x23
 8000686:	f7ff fdaf 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 800068a:	2023      	movs	r0, #35	@ 0x23
 800068c:	f7ff fd90 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000694:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000698:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80006a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80006b8:	230a      	movs	r3, #10
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_SPI1_Init+0xcc>)
 80006c4:	f000 f9ec 	bl	8000aa0 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_SPI1_Init+0xcc>)
 80006ca:	f7ff fec9 	bl	8000460 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3740      	adds	r7, #64	@ 0x40
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80006f4:	2010      	movs	r0, #16
 80006f6:	f7ff fe7b 	bl	80003f0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80006fa:	2020      	movs	r0, #32
 80006fc:	f7ff fe78 	bl	80003f0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff fe75 	bl	80003f0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000706:	4915      	ldr	r1, [pc, #84]	@ (800075c <MX_GPIO_Init+0x7c>)
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <MX_GPIO_Init+0x80>)
 800070a:	f7ff fec7 	bl	800049c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, CS1_Pin|CS2_Pin|CS3_Pin|CS4_Pin);
 800070e:	f641 611e 	movw	r1, #7710	@ 0x1e1e
 8000712:	4814      	ldr	r0, [pc, #80]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000714:	f7ff feb3 	bl	800047e <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_GPIO_Init+0x7c>)
 800071a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800071c:	2301      	movs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_GPIO_Init+0x80>)
 800072e:	f000 f930 	bl	8000992 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|CS3_Pin|CS4_Pin;
 8000732:	f641 631e 	movw	r3, #7710	@ 0x1e1e
 8000736:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000738:	2301      	movs	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 800073c:	2301      	movs	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_GPIO_Init+0x84>)
 800074e:	f000 f920 	bl	8000992 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	04200020 	.word	0x04200020
 8000760:	40011000 	.word	0x40011000
 8000764:	40010800 	.word	0x40010800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff fff8 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007de:	490c      	ldr	r1, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f4:	4c09      	ldr	r4, [pc, #36]	@ (800081c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f000 faaf 	bl	8000d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fe85 	bl	8000514 <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000814:	08000dcc 	.word	0x08000dcc
  ldr r2, =_sbss
 8000818:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800081c:	20000020 	.word	0x20000020

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <LL_GPIO_SetPinMode>:
{
 8000822:	b490      	push	{r4, r7}
 8000824:	b088      	sub	sp, #32
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	461a      	mov	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	0e1b      	lsrs	r3, r3, #24
 8000836:	4413      	add	r3, r2
 8000838:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800083a:	6822      	ldr	r2, [r4, #0]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa93 f3a3 	rbit	r3, r3
 8000846:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	fab3 f383 	clz	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	210f      	movs	r1, #15
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	401a      	ands	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	fa93 f3a3 	rbit	r3, r3
 8000866:	61bb      	str	r3, [r7, #24]
  return result;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	6023      	str	r3, [r4, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bc90      	pop	{r4, r7}
 8000884:	4770      	bx	lr

08000886 <LL_GPIO_SetPinSpeed>:
{
 8000886:	b490      	push	{r4, r7}
 8000888:	b088      	sub	sp, #32
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	461a      	mov	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	0e1b      	lsrs	r3, r3, #24
 800089a:	4413      	add	r3, r2
 800089c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800089e:	6822      	ldr	r2, [r4, #0]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa93 f3a3 	rbit	r3, r3
 80008aa:	613b      	str	r3, [r7, #16]
  return result;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	fab3 f383 	clz	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	2103      	movs	r1, #3
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	401a      	ands	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	fa93 f3a3 	rbit	r3, r3
 80008ca:	61bb      	str	r3, [r7, #24]
  return result;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fab3 f383 	clz	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	6023      	str	r3, [r4, #0]
}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc90      	pop	{r4, r7}
 80008e8:	4770      	bx	lr

080008ea <LL_GPIO_SetPinOutputType>:
{
 80008ea:	b490      	push	{r4, r7}
 80008ec:	b088      	sub	sp, #32
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	461a      	mov	r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	0e1b      	lsrs	r3, r3, #24
 80008fe:	4413      	add	r3, r2
 8000900:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa93 f3a3 	rbit	r3, r3
 800090e:	613b      	str	r3, [r7, #16]
  return result;
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	fab3 f383 	clz	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	2104      	movs	r1, #4
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	fa93 f3a3 	rbit	r3, r3
 800092e:	61bb      	str	r3, [r7, #24]
  return result;
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fab3 f383 	clz	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	6023      	str	r3, [r4, #0]
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bc90      	pop	{r4, r7}
 800094c:	4770      	bx	lr

0800094e <LL_GPIO_SetPinPull>:
{
 800094e:	b480      	push	{r7}
 8000950:	b087      	sub	sp, #28
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	68da      	ldr	r2, [r3, #12]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	613b      	str	r3, [r7, #16]
  return result;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	fab3 f383 	clz	r3, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	408b      	lsls	r3, r1
 8000982:	431a      	orrs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	60da      	str	r2, [r3, #12]
}
 8000988:	bf00      	nop
 800098a:	371c      	adds	r7, #28
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b088      	sub	sp, #32
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	0c1b      	lsrs	r3, r3, #16
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	fa93 f3a3 	rbit	r3, r3
 80009b0:	60fb      	str	r3, [r7, #12]
  return result;
 80009b2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80009b4:	fab3 f383 	clz	r3, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80009bc:	e044      	b.n	8000a48 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80009be:	2201      	movs	r2, #1
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	409a      	lsls	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d03a      	beq.n	8000a42 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d806      	bhi.n	80009e0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80009d2:	f240 1201 	movw	r2, #257	@ 0x101
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	e008      	b.n	80009f2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	3b08      	subs	r3, #8
 80009e4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009f0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d106      	bne.n	8000a08 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	461a      	mov	r2, r3
 8000a00:	69b9      	ldr	r1, [r7, #24]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa3 	bl	800094e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	69b9      	ldr	r1, [r7, #24]
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff06 	bl	8000822 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d003      	beq.n	8000a26 <LL_GPIO_Init+0x94>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	d10d      	bne.n	8000a42 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	69b9      	ldr	r1, [r7, #24]
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff29 	bl	8000886 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	69b9      	ldr	r1, [r7, #24]
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff54 	bl	80008ea <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3301      	adds	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1b4      	bne.n	80009be <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6e:	2b40      	cmp	r3, #64	@ 0x40
 8000a70:	d101      	bne.n	8000a76 <LL_SPI_IsEnabled+0x18>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_SPI_IsEnabled+0x1a>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	611a      	str	r2, [r3, #16]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffd5 	bl	8000a5e <LL_SPI_IsEnabled>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d139      	bne.n	8000b2e <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000ac2:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	6811      	ldr	r1, [r2, #0]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	6852      	ldr	r2, [r2, #4]
 8000ace:	4311      	orrs	r1, r2
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	6892      	ldr	r2, [r2, #8]
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	68d2      	ldr	r2, [r2, #12]
 8000ada:	4311      	orrs	r1, r2
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	6912      	ldr	r2, [r2, #16]
 8000ae0:	4311      	orrs	r1, r2
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	6952      	ldr	r2, [r2, #20]
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	6992      	ldr	r2, [r2, #24]
 8000aec:	4311      	orrs	r1, r2
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	69d2      	ldr	r2, [r2, #28]
 8000af2:	4311      	orrs	r1, r2
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	6a12      	ldr	r2, [r2, #32]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f023 0204 	bic.w	r2, r3, #4
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b1c:	d105      	bne.n	8000b2a <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffac 	bl	8000a82 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <LL_InitTick+0x30>)
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <LL_InitTick+0x30>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <LL_InitTick+0x30>)
 8000b58:	2205      	movs	r2, #5
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000b74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ffdd 	bl	8000b38 <LL_InitTick>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <LL_mDelay+0x44>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000b96:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d00c      	beq.n	8000bba <LL_mDelay+0x32>
  {
    Delay++;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000ba6:	e008      	b.n	8000bba <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <LL_mDelay+0x44>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <LL_mDelay+0x32>
    {
      Delay--;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f3      	bne.n	8000ba8 <LL_mDelay+0x20>
    }
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	@ (8000be8 <LL_SetSystemCoreClock+0x18>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000

08000bec <LL_SPI_Enable>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d101      	bne.n	8000c22 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	2b80      	cmp	r3, #128	@ 0x80
 8000c40:	d101      	bne.n	8000c46 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c60:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	330c      	adds	r3, #12
 8000c84:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	78fa      	ldrb	r2, [r7, #3]
 8000c8a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <spi_transmit>:
 *      Author: dell
 */
#include "spi.h"

bool spi_transmit(uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t count = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint8_t index = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	74fb      	strb	r3, [r7, #19]
  // Chờ cờ BUSY tắt
  while (LL_SPI_IsActiveFlag_BSY(SPI1))
 8000cae:	e008      	b.n	8000cc2 <spi_transmit+0x2a>
  {
    if (count > timeout)
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d901      	bls.n	8000cbc <spi_transmit+0x24>
    {
      return false;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e045      	b.n	8000d48 <spi_transmit+0xb0>
    }
    else
      count++;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  while (LL_SPI_IsActiveFlag_BSY(SPI1))
 8000cc2:	4823      	ldr	r0, [pc, #140]	@ (8000d50 <spi_transmit+0xb8>)
 8000cc4:	f7ff ffb3 	bl	8000c2e <LL_SPI_IsActiveFlag_BSY>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f0      	bne.n	8000cb0 <spi_transmit+0x18>
  }
  count = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]

  // Bật ngoại vi SPI
  LL_SPI_Enable(SPI1);
 8000cd2:	481f      	ldr	r0, [pc, #124]	@ (8000d50 <spi_transmit+0xb8>)
 8000cd4:	f7ff ff8a 	bl	8000bec <LL_SPI_Enable>
  // Truyền dữ liệu
  while (index < len)
 8000cd8:	e01c      	b.n	8000d14 <spi_transmit+0x7c>
  {
    // Kiểm tra bộ đệm truyền có trống hay không
    if (LL_SPI_IsActiveFlag_TXE(SPI1))
 8000cda:	481d      	ldr	r0, [pc, #116]	@ (8000d50 <spi_transmit+0xb8>)
 8000cdc:	f7ff ff95 	bl	8000c0a <LL_SPI_IsActiveFlag_TXE>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00d      	beq.n	8000d02 <spi_transmit+0x6a>
    {
      LL_SPI_TransmitData8(SPI1, pData[index]);
 8000ce6:	7cfb      	ldrb	r3, [r7, #19]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4817      	ldr	r0, [pc, #92]	@ (8000d50 <spi_transmit+0xb8>)
 8000cf2:	f7ff ffbf 	bl	8000c74 <LL_SPI_TransmitData8>
      index++;
 8000cf6:	7cfb      	ldrb	r3, [r7, #19]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	74fb      	strb	r3, [r7, #19]
      count = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e008      	b.n	8000d14 <spi_transmit+0x7c>
    }
    else
    {
      if (count > timeout)
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d901      	bls.n	8000d0e <spi_transmit+0x76>
      {
        return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e01c      	b.n	8000d48 <spi_transmit+0xb0>
      }
      else
        count++;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  while (index < len)
 8000d14:	7cfa      	ldrb	r2, [r7, #19]
 8000d16:	7afb      	ldrb	r3, [r7, #11]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3de      	bcc.n	8000cda <spi_transmit+0x42>
    }
  }
  // Chờ cờ BUSY tắt
  while (LL_SPI_IsActiveFlag_BSY(SPI1))
 8000d1c:	e008      	b.n	8000d30 <spi_transmit+0x98>
  {
    if (count > timeout)
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d901      	bls.n	8000d2a <spi_transmit+0x92>
    {
      return false;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e00e      	b.n	8000d48 <spi_transmit+0xb0>
    }
    else
      count++;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  while (LL_SPI_IsActiveFlag_BSY(SPI1))
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <spi_transmit+0xb8>)
 8000d32:	f7ff ff7c 	bl	8000c2e <LL_SPI_IsActiveFlag_BSY>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f0      	bne.n	8000d1e <spi_transmit+0x86>
  }
  count = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  // Xóa cờ OVERRUN
  LL_SPI_ClearFlag_OVR(SPI1);
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <spi_transmit+0xb8>)
 8000d42:	f7ff ff86 	bl	8000c52 <LL_SPI_ClearFlag_OVR>
  return true;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40013000 	.word	0x40013000

08000d54 <memset>:
 8000d54:	4603      	mov	r3, r0
 8000d56:	4402      	add	r2, r0
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d100      	bne.n	8000d5e <memset+0xa>
 8000d5c:	4770      	bx	lr
 8000d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d62:	e7f9      	b.n	8000d58 <memset+0x4>

08000d64 <__libc_init_array>:
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	2600      	movs	r6, #0
 8000d68:	4d0c      	ldr	r5, [pc, #48]	@ (8000d9c <__libc_init_array+0x38>)
 8000d6a:	4c0d      	ldr	r4, [pc, #52]	@ (8000da0 <__libc_init_array+0x3c>)
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	10a4      	asrs	r4, r4, #2
 8000d70:	42a6      	cmp	r6, r4
 8000d72:	d109      	bne.n	8000d88 <__libc_init_array+0x24>
 8000d74:	f000 f81a 	bl	8000dac <_init>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	4d0a      	ldr	r5, [pc, #40]	@ (8000da4 <__libc_init_array+0x40>)
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <__libc_init_array+0x44>)
 8000d7e:	1b64      	subs	r4, r4, r5
 8000d80:	10a4      	asrs	r4, r4, #2
 8000d82:	42a6      	cmp	r6, r4
 8000d84:	d105      	bne.n	8000d92 <__libc_init_array+0x2e>
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
 8000d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8c:	4798      	blx	r3
 8000d8e:	3601      	adds	r6, #1
 8000d90:	e7ee      	b.n	8000d70 <__libc_init_array+0xc>
 8000d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d96:	4798      	blx	r3
 8000d98:	3601      	adds	r6, #1
 8000d9a:	e7f2      	b.n	8000d82 <__libc_init_array+0x1e>
 8000d9c:	08000dc4 	.word	0x08000dc4
 8000da0:	08000dc4 	.word	0x08000dc4
 8000da4:	08000dc4 	.word	0x08000dc4
 8000da8:	08000dc8 	.word	0x08000dc8

08000dac <_init>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr

08000db8 <_fini>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr
